ORGANIZATION_BLOCK OB 1
BEGIN
	// Check pointer immediates
	L		P#10.6
	__ASSERT==	__ACCU 1,	DW#16#00000056
	L		P#P 1.1
	__ASSERT==	__ACCU 1,	DW#16#80000009
	L		P#E 2.1
	__ASSERT==	__ACCU 1,	DW#16#81000011
	L		P#A 3.1
	__ASSERT==	__ACCU 1,	DW#16#82000019
	L		P#M 4.1
	__ASSERT==	__ACCU 1,	DW#16#83000021
	L		P#L 5.1
	__ASSERT==	__ACCU 1,	DW#16#86000029


	// Test address register instructions
	L		P#885.3
	LAR1
	L		P#886.2
	LAR2
	__ASSERT==	__ACCU 1,	P#886.2
	__ASSERT==	__ACCU 2,	P#885.3
	__ASSERT==	__AR 1,		P#885.3
	__ASSERT==	__AR 2,		P#886.2
	+AR1		P#1.1
	__ASSERT==	__AR 1,		P#886.4
	+AR2		P#5.1
	__ASSERT==	__AR 2,		P#891.3
	LAR1		P#12.3
	LAR2		P#32.1
	__ASSERT==	__AR 1,		P#12.3
	__ASSERT==	__AR 2,		P#32.1
	L		111
	L		222
	TAR1
	__ASSERT==	__ACCU 1,	P#12.3
	__ASSERT==	__ACCU 2,	222
	TAR2
	__ASSERT==	__ACCU 1,	P#32.1
	__ASSERT==	__ACCU 2,	P#12.3
	TAR1		LD 0
	TAR2		LD 4
	__ASSERT==	LD 0,		P#12.3
	__ASSERT==	LD 4,		P#32.1


	// Test indirect read
	L		0
	T		MD 100
	T		MD 104
	SET
	=		M 100.0
	=		M 100.2
	LAR1		P#100.0
	LAR2		P#104.0
	U		M [AR1, P#0.0]
	__ASSERT==	__STW VKE,	1
	U		M [AR1, P#0.1]
	__ASSERT==	__STW VKE,	0
	U		M [AR1, P#0.2]
	__ASSERT==	__STW VKE,	1
	U		M [AR1, P#0.3]
	__ASSERT==	__STW VKE,	0
	U		M [AR1, P#1.0]
	__ASSERT==	__STW VKE,	0
	U		M [AR2, P#0.0]
	__ASSERT==	__STW VKE,	0
	LAR1		P#100.1
	U		M [AR1, P#0.0]
	__ASSERT==	__STW VKE,	0
	U		M [AR1, P#0.1]
	__ASSERT==	__STW VKE,	1
	L		P#100.0
	T		LD 0
	U		M [LD 0]
	__ASSERT==	__STW VKE,	1
	L		P#100.1
	T		LD 0
	U		M [LD 0]
	__ASSERT==	__STW VKE,	0
	L		P#100.0
	T		LD 0
	L		MD [LD 0]
	__ASSERT==	__ACCU 1,	DW#16#05000000
	LAR1		P#M 100.0
	U		[AR1, P#0.0]
	__ASSERT==	__STW VKE,	1
	U		[AR1, P#0.1]
	__ASSERT==	__STW VKE,	0
	U		[AR1, P#0.2]
	__ASSERT==	__STW VKE,	1
	U		[AR1, P#0.3]
	__ASSERT==	__STW VKE,	0
	LAR1		P#M 100.0
	L		B [AR1, P#0.0]
	__ASSERT==	__ACCU 1,	DW#16#00000005
	L		W [AR1, P#0.0]
	__ASSERT==	__ACCU 1,	DW#16#00000500
	L		D [AR1, P#0.0]
	__ASSERT==	__ACCU 1,	DW#16#05000000


	// Test indirect write
	L		0
	T		MD 100
	T		MD 104
	SET
	=		M 100.0
	=		M 100.2
	LAR1		P#M 100.4
	=		[AR1, P#0.0]
	=		[AR1, P#0.1]
	L		MD 100
	__ASSERT==	__ACCU 1,	DW#16#35000000
	LAR1		P#M 100.0
	L		DW#16#ABCDEF12
	T		D [AR1, P#0.0]
	L		MD 100
	__ASSERT==	__ACCU 1,	DW#16#ABCDEF12
	T		D [AR1, P#1.0]
	L		MD 100
	__ASSERT==	__ACCU 1,	DW#16#ABABCDEF
	L		P#100.0
	T		LD 0
	L		DW#16#98765432
	T		MD [LD 0]
	L		MD 100
	__ASSERT==	__ACCU 1,	DW#16#98765432
	LAR1		P#100.0
	L		DW#16#12345678
	T		MD [AR1, P#0.0]
	L		MD 100
	__ASSERT==	__ACCU 1,	DW#16#12345678


	CALL FB 1, DB 1 (
		IN_VAL_0	:= 6666,
		IN_VAL_1	:= 6767,
		ZERO_PTR_VAL	:= 0,
		ONE_PTR_VAL	:= 8,
	)

	CALL FC 1 (
		IN_VAL_0	:= 5555,
		IN_VAL_1	:= 5656,
	)
END_ORGANIZATION_BLOCK


FUNCTION_BLOCK FB 1
	VAR_INPUT
		IN_VAL_0	: INT
		IN_VAL_1	: INT
		ZERO_PTR_VAL	: DWORD
		ONE_PTR_VAL	: DWORD
	END_VAR
BEGIN
	L		P##IN_VAL_0
	__ASSERT==	__ACCU 1,	DW#16#85000000
	L		P##IN_VAL_1
	__ASSERT==	__ACCU 1,	DW#16#85000010


	L		DW#16#11223344
	T		MD 0
	L		DW#16#55667788
	T		MD 4
	L		MD [#ZERO_PTR_VAL]
	__ASSERT==	__ACCU 1,	DW#16#11223344
	L		MD [#ONE_PTR_VAL]
	__ASSERT==	__ACCU 1,	DW#16#22334455


	L		DW#16#AABBCCDD
	T		MD 1
	CALL FB 2, DB 2 (
		IN_VAL_0	:= MD [#ONE_PTR_VAL]
	)
END_FUNCTION_BLOCK


FUNCTION_BLOCK FB 2
	VAR_INPUT
		IN_VAL_0	: DWORD
	END_VAR
BEGIN
	L		#IN_VAL_0
	__ASSERT==	__ACCU 1,	DW#16#AABBCCDD
END_FUNCTION_BLOCK


FUNCTION FC 1 : VOID
	VAR_INPUT
		IN_VAL_0	: INT
		IN_VAL_1	: INT
	END_VAR
BEGIN
	L		P##IN_VAL_0
	__ASSERT==	__ACCU 1,	DW#16#85000000 //FIXME should be area 87
	L		P##IN_VAL_1
	__ASSERT==	__ACCU 1,	DW#16#85000010 //FIXME should be area 87
END_FUNCTION


DATA_BLOCK DB 1
	FB 1
BEGIN
	IN_VAL_0	:= 88
	IN_VAL_1	:= 99
END_DATA_BLOCK


DATA_BLOCK DB 2
	FB 2
BEGIN
END_DATA_BLOCK
