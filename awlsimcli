#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# AWL simulator - Commandline interface
# Copyright 2012-2013 Michael Buesch <m@bues.ch>
#
# Licensed under the terms of the GNU General Public License version 2.
#

import sys
import getopt
import traceback


opt_onecycle = False
opt_quiet = False


def printInfo(text):
	sys.stdout.write(text)
	sys.stdout.write("\n")
	sys.stdout.flush()

def printError(text):
	sys.stderr.write(text)
	sys.stderr.write("\n")
	sys.stderr.flush()

def usage():
	printInfo("awlsim version %d.%d" % (VERSION_MAJOR, VERSION_MINOR))
	printInfo("")
	printInfo("%s [OPTIONS] AWL-source" % sys.argv[0])
	printInfo("")
	printInfo("Options:")
	printInfo(" -1|--onecycle         Only run one cycle")
	printInfo(" -4|--fouraccu         Enable 4-accu mode")
	printInfo(" -q|--quiet            No status messages")
	printInfo(" -x|--extended-insns   Enable extended instructions")
	printInfo(" -r|--rng 1/0          Enable/disable the RNG (Default: off)")
	printInfo(" -m|--mnemonics auto   Mnemonics type: en, de, auto (default)")
#	printInfo(" -C|--cython           Use Cython core")

def writeStdout(message):
	if not opt_quiet:
		sys.stdout.write(message)
		sys.stdout.flush()

nextScreenUpdate = 0.0
lastDump = ""

def blockExitCallback(cpu):
	global nextScreenUpdate
	if cpu.now < nextScreenUpdate and\
	   not opt_onecycle:
		return
	nextScreenUpdate = cpu.now + 0.1
	# Dump CPU and pad lines
	dump = '\n'.join(line + (79 - len(line)) * ' ' + '|'
			 for line in str(cpu).splitlines())
	global lastDump
	lastDump = dump
	writeStdout("\x1B[H" + dump)

def handleSimError(title, exception):
	printError("-- %s --" % title)
	printError("ERROR at line %s:" % exception.getLineNrStr())
	printError("  " + str(exception))
	cpu = exception.getCpu()
	if cpu:
		printError("\n" + str(cpu))

def main():
	global opt_onecycle
	global opt_quiet

	opt_fouraccu = False
	opt_extInsns = False
	opt_rng = False
	opt_mnemonics = "auto"
	opt_cython = False

	try:
		(opts, args) = getopt.getopt(sys.argv[1:],
			"h1qxr:m:C",
			[ "help", "onecycle", "quiet", "extended-insns",
			  "rng=", "mnemonics=", "cython", ])
	except getopt.GetoptError as e:
		printError(str(e))
		usage()
		return 1
	for (o, v) in opts:
		if o in ("-h", "--help"):
			usage()
			return 0
		if o in ("-1", "--onecycle"):
			opt_onecycle = True
		if o in ("-4", "--fouraccu"):
			opt_fouraccu = True
		if o in ("-q", "--quiet"):
			opt_quiet = True
		if o in ("-x", "--extended-insns"):
			opt_extInsns = True
		if o in ("-r", "--rng"):
			opt_rng = str2bool(v)
		if o in ("-m", "--mnemonics"):
			opt_mnemonics = v.lower()
			if opt_mnemonics not in ("en", "de", "auto"):
				printError("-m|--mnemonics: Invalid mnemonics type")
				sys.exit(1)
		if o in ("-C", "--cython"):
			opt_cython = True
	if len(args) != 1:
		usage()
		return 1
	awlSource = args[0]

	if opt_cython:
		from awlsim_cython.main import AwlSim
		from awlsim_cython.parser import AwlParser
		from awlsim_cython.cpuspecs import S7CPUSpecs
		from awlsim_cython.util import AwlSimError, AwlParserError
	else:
		from awlsim.main import AwlSim
		from awlsim.parser import AwlParser
		from awlsim.cpuspecs import S7CPUSpecs
		from awlsim.util import AwlSimError, AwlParserError

	opt_mnemonics = {
		"en"	: S7CPUSpecs.MNEMONICS_EN,
		"de"	: S7CPUSpecs.MNEMONICS_DE,
		"auto"	: S7CPUSpecs.MNEMONICS_AUTO,
	}[opt_mnemonics]

	try:
		writeStdout("Parsing code...\n")
		p = AwlParser()
		p.parseFile(awlSource)
		writeStdout("Initializing simulator...\n")
		s = AwlSim()
		cpu = s.getCPU()
		specs = cpu.getSpecs()
		specs.setConfiguredMnemonics(opt_mnemonics)
		specs.setNrAccus(4 if opt_fouraccu else 2)
		cpu.enableRNG(opt_rng)
		cpu.enableExtendedInsns(opt_extInsns)
		cpu.setBlockExitCallback(blockExitCallback, cpu)
		writeStdout("Loading code...\n")
		s.load(p.getParseTree())
		try:
			writeStdout("\x1B[?25l\x1B[2J")
			while 1:
				s.runCycle()
				if opt_onecycle:
					break
		finally:
			writeStdout("\x1B[?25h\x1B[2J\x1B[H")
			writeStdout(lastDump + '\n')
	except AwlParserError as e:
		handleSimError("AWL parser error", e)
		return 1
	except AwlSimError as e:
		handleSimError("AWL simulator error", e)
		return 1
	except KeyboardInterrupt as e:
		pass
	return 0

if __name__ == "__main__":
	sys.exit(main())
